@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix fnon: <https://w3id.org/function/ontology/n3#> .

log:collectAllIn a fno:Function ;
    vs:term_status  "testing" ;
    fnon:tldr "Collects all values matching a given clause and adds them to a list." ;
    dcterms:comment """`true` if and only if,  for every valid substitution of clause `$s.2`, 
    i.e., a substitution of variables with terms that generates an instance of `$s.2` that is contained in the scope, 
    the instance of `$s.1` generated by the same substitution is a member of list `$s.3`. 
This applies scoped quantification.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
Set of basic examples for log:collectAllIn.
            """ ;
                rdfs:seeAlso <> ;
                fno:expression """
@prefix : <http://example.org/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .

:Let :param "Huey" .
:Let :param "Dewey" .
:Let :param "Louie" .

{
    ( ?param { :Let :param ?param } ?allParams ) log:collectAllIn _:x .

    # Variable to be collected can also be part of a list or graph term
    ( (?param) { :Let :param ?param } ?nestedParams ) log:collectAllIn _:x .

    # Add some extra criteria on variable values to be collected
    ( ?param
        { 
            :Let :param ?param .
            ?param string:lessThan "Louie"  .
        } 
      ?filteredParams ) log:collectAllIn _:x .
}
=> 
{   
    :result1 :is ?allParams .
    :result2 :is ?nestedParams .
    :result3 :is ?filteredParams .
} .
""" ;
                fno:result """
@prefix : <http://example.org/>.

:result1 :is ("Huey" "Dewey" "Louie").
:result2 :is (("Huey") ("Dewey") ("Louie")).
:result3 :is ("Huey" "Dewey").
""" 
            ] [ a fno:Test ;
                dcterms:description """
Example where the list is already given; in that case, the collected list will be compared with the given list.
            """ ;
                rdfs:seeAlso <> ;
                fno:expression """
@prefix : <http://example.org/>.
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .

:Let :param "Huey" .
:Let :param "Dewey" .
:Let :param "Louie" .

{
    ( ?param { :Let :param ?param } ("Huey" "Dewey" "Louie") ) log:collectAllIn _:x .
}
=> 
{   
    :result :is true .
} .
            """ ;
                fno:result """
@prefix : <http://example.org/>.

:result :is true .
""" 
            ] ) ;
    fno:name "collectAllIn" ;
    fno:parameter (
        [ a fno:Parameter ;
            dcterms:description "" ;
            fno:mode "+" ;
            fno:predicate "$s" ;
            fno:type rdf:List ;
            fnon:position fnon:subject ;
            fnon:listElements ( [
                fno:predicate "$s.1" ;
                fno:mode "-"
            ] [
                fno:predicate "$s.2" ;
                fno:mode "+" ;
                fno:type log:Formula
            ] [
                fno:predicate "$s.3" ;
                fno:mode "-" ;
                fno:type rdf:List
            ] )
        ] [ a fno:Parameter ;
            dcterms:description "Scope of the builtin. Leave as a variable to use current N3 document as scope." ;
            fno:predicate "$o" ;
            fno:mode "?" ; # TODO unsure about this
            fnon:position fnon:object
        ] ) .
